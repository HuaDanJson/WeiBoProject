package cool.android.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import cool.weiboproject.android.bean.WeiBoBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "WEI_BO_BEAN".
*/
public class WeiBoBeanDao extends AbstractDao<WeiBoBean, Long> {

    public static final String TABLENAME = "WEI_BO_BEAN";

    /**
     * Properties of entity WeiBoBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property CreatTime = new Property(0, long.class, "creatTime", true, "_id");
        public final static Property Title = new Property(1, String.class, "title", false, "WeiBoBean");
        public final static Property Introduce = new Property(2, String.class, "introduce", false, "INTRODUCE");
        public final static Property Value = new Property(3, String.class, "value", false, "VALUE");
        public final static Property SendUserName = new Property(4, String.class, "sendUserName", false, "SEND_USER_NAME");
        public final static Property CollectionUserName = new Property(5, String.class, "collectionUserName", false, "COLLECTION_USER_NAME");
    }


    public WeiBoBeanDao(DaoConfig config) {
        super(config);
    }
    
    public WeiBoBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"WEI_BO_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL ," + // 0: creatTime
                "\"WeiBoBean\" TEXT," + // 1: title
                "\"INTRODUCE\" TEXT," + // 2: introduce
                "\"VALUE\" TEXT," + // 3: value
                "\"SEND_USER_NAME\" TEXT," + // 4: sendUserName
                "\"COLLECTION_USER_NAME\" TEXT);"); // 5: collectionUserName
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"WEI_BO_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, WeiBoBean entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getCreatTime());
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(2, title);
        }
 
        String introduce = entity.getIntroduce();
        if (introduce != null) {
            stmt.bindString(3, introduce);
        }
 
        String value = entity.getValue();
        if (value != null) {
            stmt.bindString(4, value);
        }
 
        String sendUserName = entity.getSendUserName();
        if (sendUserName != null) {
            stmt.bindString(5, sendUserName);
        }
 
        String collectionUserName = entity.getCollectionUserName();
        if (collectionUserName != null) {
            stmt.bindString(6, collectionUserName);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, WeiBoBean entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getCreatTime());
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(2, title);
        }
 
        String introduce = entity.getIntroduce();
        if (introduce != null) {
            stmt.bindString(3, introduce);
        }
 
        String value = entity.getValue();
        if (value != null) {
            stmt.bindString(4, value);
        }
 
        String sendUserName = entity.getSendUserName();
        if (sendUserName != null) {
            stmt.bindString(5, sendUserName);
        }
 
        String collectionUserName = entity.getCollectionUserName();
        if (collectionUserName != null) {
            stmt.bindString(6, collectionUserName);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public WeiBoBean readEntity(Cursor cursor, int offset) {
        WeiBoBean entity = new WeiBoBean( //
            cursor.getLong(offset + 0), // creatTime
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // title
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // introduce
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // value
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // sendUserName
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // collectionUserName
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, WeiBoBean entity, int offset) {
        entity.setCreatTime(cursor.getLong(offset + 0));
        entity.setTitle(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setIntroduce(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setValue(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setSendUserName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setCollectionUserName(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(WeiBoBean entity, long rowId) {
        entity.setCreatTime(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(WeiBoBean entity) {
        if(entity != null) {
            return entity.getCreatTime();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(WeiBoBean entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
